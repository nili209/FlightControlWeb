
////This code was generated by a tool.
////Changes to this file will be lost if the code is regenerated.
//// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
//using System.Data.SQLite;
//using System;
//using System.IO;
//using Microsoft.Data.Sqlite;
//using System.Collections.Generic;
//using FlightControlWeb.Models;
//using static FlightControlWeb.Models.FlightPlan;

//namespace FlightControlWeb
//{

//    public enum FlightPlanE
//    {
//        Id = 0,
//        Passengers,
//        CompanyName
//    }
//    public enum InitialLocationE
//    {
//        Id = 0,
//        Longitude,
//        Latitude,
//        DateTime
//    }
//    public enum SegmentsE
//    {
//        Id = 0,
//        FlightId,
//        Place,
//        Longitude,
//        Latitude,
//        TimespanSecond
//    }
//    public class SQLiteDb
//    {
//        int flightPlanIdE;
//        int flightPlanPassangersE;
//        int flightPlanCompanyNameE;

//        int initialLocationIdE;
//        int initialLocationLongitudeE;
//        int initialLocationLatitudeE;
//        int initalLocationDateTimeE;

//        int segmentsIdE;
//        int segmentFlightIdE;
//        int segmentPlaceE;
//        int segmentLongitudeE;
//        int segmentLatitudeE;
//        int segmenTimespanSecondE;

//        string _path;
//        int segmentsCount = 0;
//        FlightGenerator flightGenerator = new FlightGenerator();
//        public SQLiteDb(string path)
//        {
//            _path = path;
//            // FlightPlan Enum.
//            flightPlanIdE = (int)FlightPlanE.Id;
//            flightPlanPassangersE = (int)FlightPlanE.Passengers;
//            flightPlanCompanyNameE = (int)FlightPlanE.CompanyName;

//            // InitialLocation Enum.
//            initialLocationIdE = (int)InitialLocationE.Id;
//            initialLocationLongitudeE = (int)InitialLocationE.Longitude;
//            initialLocationLatitudeE = (int)InitialLocationE.Latitude;
//            initalLocationDateTimeE = (int)InitialLocationE.DateTime;

//            // Segments Enum.
//            segmentsIdE = (int)SegmentsE.Id;
//            segmentFlightIdE = (int)SegmentsE.FlightId;
//            segmentPlaceE = (int)SegmentsE.Place;
//            segmentLongitudeE = (int)SegmentsE.Longitude;
//            segmentLatitudeE = (int)SegmentsE.Latitude;
//            segmenTimespanSecondE = (int)SegmentsE.TimespanSecond;

//        }

//        public void InsertExtenalFlightId(Server server, string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            SqliteCommand insertCommand = new SqliteCommand();
//            insertCommand.Connection = conn;

//            insertCommand.CommandText = "INSERT INTO ExternalFlightsTable VALUES (@Id, @Url , @FlightId)";
//            insertCommand.Parameters.AddWithValue("@Id", server.ServerId);
//            insertCommand.Parameters.AddWithValue("@Url", server.ServerURL);
//            insertCommand.Parameters.AddWithValue("@FlightId", id);
//            try
//            {
//                insertCommand.ExecuteReader();
//            }
//            catch { }
//        }

//        public void Create()
//        {
//            using (SQLiteConnection db = new SQLiteConnection(_path))
//            {
//            }
//        }

//        public SqliteConnection OpenConnection()
//        {
//            SqliteConnection conn = new SqliteConnection(@"Data Source = " + _path);
//            conn.Open();
//            return conn;
//        }

//        public object[] ReadFromTableSingleRow(SqliteConnection conn, string commendText)
//        {

//            SqliteCommand selectCommand = new SqliteCommand();
//            selectCommand.Connection = conn;
//            selectCommand.CommandText = commendText;
//            SqliteDataReader query = selectCommand.ExecuteReader();
//            object[] row = new object[query.FieldCount];
//            if (query.Read())
//            {
//                query.GetValues(row);
//            }
//            query.Close();
//            return row;
//        }

//        public List<object[]> ReadMultipleLines(SqliteConnection conn, string commendText)
//        {
//            SqliteCommand selectCommand = new SqliteCommand();
//            selectCommand.Connection = conn;
//            selectCommand.CommandText = commendText;
//            SqliteDataReader query = selectCommand.ExecuteReader();
//            List<object[]> rows = new List<object[]>();

//            while (query.Read())
//            {
//                object[] row = new object[query.FieldCount];
//                query.GetValues(row);

//                rows.Add(row);
//                //query.GetValues(row);
//            }
//            query.Close();
//            return rows;

//        }

//        public void getSegmentsCount(SqliteConnection conn, string id)
//        {

//            SqliteCommand selectCommand = new SqliteCommand();
//            selectCommand.Connection = conn;

//            selectCommand.CommandText = "SELECT MAX(Place) FROM SegmentsTable WHERE FlightId = '" + id + "'";

//            SqliteDataReader query = selectCommand.ExecuteReader();
//            if (query.Read())
//            {
//                segmentsCount = query.GetInt32(0);
//            }
//        }


//        public bool NotStarted(object[] initialLocation, DateTime requiredTime)
//        {
//            DateTime flightPlanDateTime = Convert.ToDateTime(initialLocation[initalLocationDateTimeE]);
//            int result = DateTime.Compare(requiredTime, flightPlanDateTime);

//            // requiredTime is earlier than flightPlanDateTime
//            if (result < 0)
//            {
//                return true;
//            }
//            return false;
//        }

//        public bool AlreadyFinished(int timeOfAllFlight, DateTime startTime, DateTime requiredTime)
//        {
//            TimeSpan duration = new TimeSpan(0, 0, 0, timeOfAllFlight);
//            DateTime endTime = startTime.Add(duration);

//            int result = DateTime.Compare(requiredTime, endTime);
//            // requiredTime is later than endTime
//            if (result >= 0)
//            {
//                return true;
//            }
//            return false;
//        }

//        public Flights CreateFlight(SqliteConnection conn, object[] initialLocation, List<Object[]> segements, bool isExternal, DateTime time)
//        {
//            Flights flight = flightGenerator.CreateFlightFromGivenData(initialLocation, segements, isExternal, time);
//            object[] flightPlan = ReadFromTableSingleRow(conn, "SELECT * FROM FlightPlanTable WHERE Id = '" + flight.FlightId + "'");
//            flight.CompanyName = Convert.ToString(flightPlan[flightPlanCompanyNameE]);
//            flight.Passengers = Convert.ToInt32(flightPlan[flightPlanPassangersE]);
//            return flight;
//        }

//        public List<Flights> GetExternal(DateTime time)
//        {
//            List<Flights> flights = new List<Flights>();
//            return flights;
//        }

//        public List<Flights> GetFlights(DateTime time)
//        {
//            List<Flights> flights = new List<Flights>();
//            flights = GetInternalFlights(time);
//            return flights;
//        }

//        public List<Flights> GetInternalFlights(DateTime time)
//        {
//            // Reading all the data.
//            SqliteConnection conn = OpenConnection();
//            SqliteCommand selectCommand = new SqliteCommand();
//            selectCommand.Connection = conn;
//            selectCommand.CommandText = "SELECT * FROM InitialLocationTable";
//            SqliteDataReader query = selectCommand.ExecuteReader();
//            List<Flights> flights = new List<Flights>();
//            while (query.Read())
//            {
//                object[] row = new object[query.FieldCount];
//                query.GetValues(row);
//                // InitialTime is in the future
//                if (NotStarted(row, time))
//                {
//                    continue;
//                }
//                string command = "SELECT SUM(TimespanSeconds) FROM SegmentsTable WHERE FlightId= '" + row[initialLocationIdE].ToString() + "'";
//                object[] sumTime = ReadFromTableSingleRow(conn, command);
//                if (AlreadyFinished(Convert.ToInt32(sumTime[0]), Convert.ToDateTime(row[initalLocationDateTimeE]), time))
//                {
//                    continue;
//                }
//                command = "SELECT * FROM SegmentsTable WHERE FlightId= '" + row[initialLocationIdE].ToString() + "'";
//                List<Object[]> sgements = ReadMultipleLines(conn, command);
//                flights.Add(CreateFlight(conn, row, sgements, false, time));
//            }
//            query.Close();
//            return flights;
//        }

//        public List<Server> CreateServers(List<object[]> tempServers)
//        {
//            List<Server> servers = new List<Server>();

//            foreach (object[] server in tempServers)
//            {
//                Server serv = new Server();
//                serv.ServerId = Convert.ToString(server[0]);
//                serv.ServerURL = Convert.ToString(server[1]);
//                servers.Add(serv);
//            }

//            return servers;

//        }
//        public Server GetServerByIdOfFlight(string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            object[] tempServer = ReadFromTableSingleRow(conn, "SELECT * FROM ExternalFlightsTable WHERE FlightId = '" + id + "'");
//            conn.Close();
//            Server server = new Server();
//            if (tempServer[0] == null)
//            {
//                return null;
//            }
//            server.ServerId = Convert.ToString(tempServer[0]);
//            server.ServerURL = Convert.ToString(tempServer[1]);
//            return server;
//        }

//        public List<Server> GetServers()
//        {
//            SqliteConnection conn = OpenConnection();
//            List<Server> servers = new List<Server>();
//            List<object[]> tempServers = ReadMultipleLines(conn, "SELECT * FROM ServersTable");
//            servers = CreateServers(tempServers);
//            conn.Close();
//            return servers;

//        }

//        public FlightPlan GetFlightPlan(string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            //getSegmentsCount(conn, id);
//            object[] basicData = ReadFromTableSingleRow(conn, "SELECT * FROM FlightPlanTable WHERE Id = '" + id + "'");
//            object[] initialLocation = ReadFromTableSingleRow(conn, "SELECT * FROM InitialLocationTable WHERE Id= '" + id + "'");
//            // ORDER BY Place ASC
//            List<object[]> segments = ReadMultipleLines(conn, "SELECT * FROM SegmentsTable  WHERE FlightId= '" + id + "' ORDER BY Place ASC");
//            conn.Close();
//            return setFlightPlan(basicData, initialLocation, segments);
//        }

//        public List<FlightPlan> GetAllFlightPlans()
//        {
//            SqliteConnection conn = OpenConnection();
//            List<FlightPlan> list = new List<FlightPlan>();
//            List<object[]> ids = ReadMultipleLines(conn, "SELECT Id FROM FlightPlanTable");
//            foreach (object[] id in ids)
//            {
//                list.Add(GetFlightPlan(Convert.ToString(id[0])));
//            }
//            conn.Close();
//            return list;
//        }


//        public void InsertServer(Server server)
//        {
//            SqliteConnection conn = OpenConnection();
//            SqliteCommand insertCommand = new SqliteCommand();
//            insertCommand.Connection = conn;

//            insertCommand.CommandText = "INSERT INTO ServersTable VALUES (@Id , @Url)";
//            insertCommand.Parameters.AddWithValue("@Id", server.ServerId);
//            insertCommand.Parameters.AddWithValue("@Url", server.ServerURL);
//            try
//            {
//                insertCommand.ExecuteReader();
//            }
//            catch { }

//            conn.Close();
//        }

//        public void InsertToFlightPlanTable(SqliteConnection conn, FlightPlan flightPlan, string id)
//        {
//            SqliteCommand insertCommand = new SqliteCommand();
//            insertCommand.Connection = conn;

//            insertCommand.CommandText = "INSERT INTO FlightPlanTable VALUES (@Id , @Passengers, @CompanyName)";
//            insertCommand.Parameters.AddWithValue("@Id", id);
//            insertCommand.Parameters.AddWithValue("@Passengers", flightPlan.Passengers);
//            insertCommand.Parameters.AddWithValue("@CompanyName", flightPlan.CompanyName);

//            try
//            {
//                insertCommand.ExecuteReader();
//            }
//            catch { }
//        }

//        public void InsertToInitialLocationTable(SqliteConnection conn, FlightPlan flightPlan, string id)
//        {
//            SqliteCommand insertCommand = new SqliteCommand();
//            insertCommand.Connection = conn;

//            insertCommand.CommandText = "INSERT INTO InitialLocationTable VALUES (@Id , @Longitude , @Latitude , @DateTime)";
//            insertCommand.Parameters.AddWithValue("@Id", id);
//            insertCommand.Parameters.AddWithValue("@Longitude", flightPlan.InitialLocation.Longitude);
//            insertCommand.Parameters.AddWithValue("@Latitude", flightPlan.InitialLocation.Latitude);
//            insertCommand.Parameters.AddWithValue("@DateTime", flightPlan.InitialLocation.DateTime);

//            try
//            {
//                insertCommand.ExecuteReader();
//            }
//            catch { }
//        }

//        public void InsertToSegmentsTable(SqliteConnection conn, FlightPlan flightPlan, string id)
//        {
//            int i, size = flightPlan.Segments.Count;
//            for (i = 0; i < size; i++)
//            {
//                SqliteCommand insertCommand = new SqliteCommand();
//                insertCommand.Connection = conn;
//                insertCommand.CommandText = "INSERT INTO SegmentsTable VALUES (NULL, @FlightId, @Place, @Longitude , @Latitude, @TimespanSeconds)";
//                insertCommand.Parameters.AddWithValue("@FlightId", id);
//                insertCommand.Parameters.AddWithValue("@Place", i + 1);
//                insertCommand.Parameters.AddWithValue("@Longitude", flightPlan.Segments[i].Longitude);
//                insertCommand.Parameters.AddWithValue("@Latitude", flightPlan.Segments[i].Latitude);
//                insertCommand.Parameters.AddWithValue("@TimespanSeconds", flightPlan.Segments[i].TimespanSeconds);
//                try
//                {
//                    insertCommand.ExecuteReader();
//                }
//                catch { }
//            }
//        }

//        public void InsertFlightPlan(FlightPlan flightPlan, string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            InsertToFlightPlanTable(conn, flightPlan, id);
//            //InsertToDictionaryTable(id);
//            InsertToInitialLocationTable(conn, flightPlan, id);
//            InsertToSegmentsTable(conn, flightPlan, id);
//            conn.Close();
//        }

//        public void DeleteServer(string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            SqliteCommand deleteCommand = new SqliteCommand();
//            deleteCommand.Connection = conn;
//            deleteCommand.CommandText = "DELETE FROM ServersTable WHERE Id='" + id + "'";
//            deleteCommand.ExecuteReader();
//            conn.Close();
//        }

//        public bool DeleteFlightPlan(string id)
//        {
//            SqliteConnection conn = OpenConnection();
//            bool returnVal = true;

//            string[] tables = { "FlightPlanTable", "InitialLocationTable", "SegmentsTable" };
//            int i = 0;
//            for (i = 0; i < tables.Length; i++)
//            {
//                SqliteCommand deleteCommand = new SqliteCommand();
//                deleteCommand.Connection = conn;
//                deleteCommand.CommandText = "DELETE FROM " + tables[i] + " WHERE Id='" + id + "'";
//                deleteCommand.ExecuteReader();
//            }
//            conn.Close();
//            return returnVal;
//        }

//        public FlightPlan setFlightPlan(object[] basicData, object[] initialLocation, List<object[]> segments)
//        {
//            FlightPlan flightPlan = new FlightPlan();
//            if (basicData[0] == null)
//            {
//                return null;
//            }
//            //flightPlan.Id = Convert.ToString(basicData[flightPlanIdE]);
//            flightPlan.Passengers = Convert.ToInt32(basicData[flightPlanPassangersE]);
//            flightPlan.CompanyName = Convert.ToString(basicData[flightPlanCompanyNameE]);

//            double longitude = Convert.ToDouble(initialLocation[initialLocationLongitudeE]);
//            double latitude = Convert.ToDouble(initialLocation[initialLocationLatitudeE]);
//            DateTime dateTime = Convert.ToDateTime(initialLocation[initalLocationDateTimeE]);
//            Location location = new Location(longitude, latitude, dateTime);
//            flightPlan.InitialLocation = location;

//            foreach (object[] segment in segments)
//            {
//                double longitudeS = Convert.ToDouble(segment[segmentLongitudeE]);
//                double latitudeS = Convert.ToDouble(segment[segmentLatitudeE]);
//                int TimespanSecond = Convert.ToInt32(segment[segmenTimespanSecondE]);
//                Segment segment1 = new Segment(longitudeS, latitudeS, TimespanSecond);
//                flightPlan.Segments.Add(segment1);
//            }
//            return flightPlan;
//        }

//        //public static void CreateFlightPlanTable(SqliteConnection conn)
//        //{
//        //    string tableCommand = @"CREATE TABLE IF NOT EXISTS FlightPlanTable (Id TEXT PRIMARY KEY, Passengers INTEGER, CompanyName TEXT)";
//        //    SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
//        //    createTable.ExecuteReader();
//        //}

//        //public static void CreateInitialLocationTable(SqliteConnection conn)
//        //{
//        //    string tableCommand = @"CREATE TABLE IF NOT EXISTS InitialLocationTable (Id TEXT PRIMARY KEY, Longitude REAL , Latitude REAL, DateTime TEXT)";
//        //    SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
//        //    createTable.ExecuteReader();
//        //}

//        //public static void CreateSegmentsTable(SqliteConnection conn)
//        //{
//        //    string tableCommand = @"CREATE TABLE IF NOT EXISTS SegmentsTable (Id TEXT PRIMARY KEY, FlightId TEXT, Place INTEGER, Longitude REAL , Latitude REAL, TimespanSeconds INTEGER)";
//        //    SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
//        //    createTable.ExecuteReader();
//        //}

//        //public static void CreateServersTable(SqliteConnection conn)
//        //{
//        //    string tableCommand = @"CREATE TABLE IF NOT EXISTS ServersTable (Id TEXT PRIMARY KEY, Url TEXT)";
//        //    SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
//        //    createTable.ExecuteReader();
//        //}
//        public static void CreateTable(string nameOfTable, SqliteConnection conn, string columns)
//        {
//            string tableCommand = @"CREATE TABLE IF NOT EXISTS " + nameOfTable + columns;

//            SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
//            createTable.ExecuteReader();
//        }

//        public static void InitializeDatabase()
//        {

//            //string dbPath = Environment.CurrentDirectory + @"\Database.sqlite";
//            string dbPath = AppDomain.CurrentDomain.BaseDirectory + @"\Database.sqlite";
//            SqliteConnection conn = new SqliteConnection(@"Data Source = " + dbPath);
//            conn.Open();
//            //string com = "DROP Table ExternalFlightsTable";
//            //SqliteCommand delete = new SqliteCommand(com, conn);
//            //delete.ExecuteReader();
//            CreateTable("ServersTable", conn, "(Id TEXT PRIMARY KEY, Url TEXT)");
//            CreateTable("SegmentsTable", conn, "(Id TEXT PRIMARY KEY, FlightId TEXT," +
//                " Place INTEGER, Longitude REAL, Latitude REAL, TimespanSeconds INTEGER)");

//            CreateTable("InitialLocationTable", conn, "(Id TEXT PRIMARY KEY, Longitude REAL, Latitude REAL, DateTime TEXT)");
//            CreateTable("FlightPlanTable", conn, "(Id TEXT PRIMARY KEY, Passengers INTEGER, CompanyName TEXT)");
//            CreateTable("ExternalFlightsTable", conn, "(Id TEXT, Url TEXT, FlightId TEXT PRIMARY KEY)");
//            //CreateFlightPlanTable(conn);
//            //CreateInitialLocationTable(conn);
//            //CreateSegmentsTable(conn);
//            //CreateServersTable(conn);
//            conn.Close();
//        }
//    }
//}



//This code was generated by a tool.
//Changes to this file will be lost if the code is regenerated.
// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
using System.Data.SQLite;
using System;
using System.IO;
using Microsoft.Data.Sqlite;
using System.Collections.Generic;
using FlightControlWeb.Models;
using static FlightControlWeb.Models.FlightPlan;

namespace FlightControlWeb
{

    public enum FlightPlanE
    {
        Id = 0,
        Passengers,
        CompanyName
    }
    public enum InitialLocationE
    {
        Id = 0,
        Longitude,
        Latitude,
        DateTime
    }
    public enum SegmentsE
    {
        Id = 0,
        FlightId,
        Place,
        Longitude,
        Latitude,
        TimespanSecond
    }
    public class SQLiteDb
    {
        private int flightPlanPassangersE;
        private int flightPlanCompanyNameE;

        private int initialLocationIdE;
        private int initialLocationLongitudeE;
        private int initialLocationLatitudeE;
        private int initalLocationDateTimeE;

        private int segmentLongitudeE;
        private int segmentLatitudeE;
        private int segmenTimespanSecondE;

        private string _path;
        static private SqliteConnection conn;
        private FlightGenerator flightGenerator = new FlightGenerator();

        // Constructor.
        public SQLiteDb(string path)
        {
            _path = path;
            // FlightPlan Enum.
            flightPlanPassangersE = (int)FlightPlanE.Passengers;
            flightPlanCompanyNameE = (int)FlightPlanE.CompanyName;

            // InitialLocation Enum.
            initialLocationIdE = (int)InitialLocationE.Id;
            initialLocationLongitudeE = (int)InitialLocationE.Longitude;
            initialLocationLatitudeE = (int)InitialLocationE.Latitude;
            initalLocationDateTimeE = (int)InitialLocationE.DateTime;

            // Segments Enum.
            segmentLongitudeE = (int)SegmentsE.Longitude;
            segmentLatitudeE = (int)SegmentsE.Latitude;
            segmenTimespanSecondE = (int)SegmentsE.TimespanSecond;

        }
        // Insert a Server and FlightId to the ExternalFlightsTable.
        public void InsertExtenalFlightId(Server server, string id)
        {
            conn.Open();
            SqliteCommand insertCommand = new SqliteCommand();
            insertCommand.Connection = conn;

            insertCommand.CommandText = "INSERT INTO ExternalFlightsTable VALUES (@Id, @Url , @FlightId)";
            insertCommand.Parameters.AddWithValue("@Id", server.ServerId);
            insertCommand.Parameters.AddWithValue("@Url", server.ServerURL);
            insertCommand.Parameters.AddWithValue("@FlightId", id);
            try
            {
                insertCommand.ExecuteReader();
            }
            catch { }
        }

        public void Create()
        {
            using (SQLiteConnection db = new SQLiteConnection(_path))
            {
            }
        }


        // Read a single row from the data base.
        public object[] ReadFromTableSingleRow(string commendText)
        {

            SqliteCommand selectCommand = new SqliteCommand();
            selectCommand.Connection = conn;
            selectCommand.CommandText = commendText;
            SqliteDataReader query = selectCommand.ExecuteReader();
            object[] row = new object[query.FieldCount];
            if (query.Read())
            {
                query.GetValues(row);
            }
            query.Close();
            return row;
        }
        // Read multiple rows from the data base.
        public List<object[]> ReadMultipleLines(string commendText)
        {
            SqliteCommand selectCommand = new SqliteCommand();
            selectCommand.Connection = conn;
            selectCommand.CommandText = commendText;
            SqliteDataReader query = selectCommand.ExecuteReader();
            List<object[]> rows = new List<object[]>();

            while (query.Read())
            {
                object[] row = new object[query.FieldCount];
                query.GetValues(row);

                rows.Add(row);
            }
            query.Close();
            return rows;

        }

        //public void GetSegmentsCount(SqliteConnection conn, string id)
        //{

        //    SqliteCommand selectCommand = new SqliteCommand();
        //    selectCommand.Connection = conn;

        //    selectCommand.CommandText = "SELECT MAX(Place) FROM SegmentsTable WHERE FlightId = '" + id + "'";

        //    SqliteDataReader query = selectCommand.ExecuteReader();
        //    if (query.Read())
        //    {
        //        segmentsCount = query.GetInt32(0);
        //    }
        //}

        // Check if a Flight started already.
        public bool NotStarted(object[] initialLocation, DateTime requiredTime)
        {
            DateTime flightPlanDateTime = Convert.ToDateTime(initialLocation[initalLocationDateTimeE]);
            int result = DateTime.Compare(requiredTime, flightPlanDateTime);

            // requiredTime is earlier than flightPlanDateTime
            if (result < 0)
            {
                return true;
            }
            return false;
        }
        // Check if a Flight is already finish flying.
        public bool AlreadyFinished(int timeOfAllFlight, DateTime startTime, DateTime requiredTime)
        {
            TimeSpan duration = new TimeSpan(0, 0, 0, timeOfAllFlight);
            DateTime endTime = startTime.Add(duration);

            int result = DateTime.Compare(requiredTime, endTime);
            // requiredTime is later than endTime
            if (result >= 0)
            {
                return true;
            }
            return false;
        }

        // Create a Flights object.
        public Flights CreateFlight(object[] initialLocation, List<Object[]> segements, bool isExternal, DateTime time)
        {
            Flights flight = flightGenerator.CreateFlightFromGivenData(initialLocation, segements, isExternal, time);
            object[] flightPlan = ReadFromTableSingleRow("SELECT * FROM FlightPlanTable WHERE Id = '" + flight.FlightId + "'");
            flight.CompanyName = Convert.ToString(flightPlan[flightPlanCompanyNameE]);
            flight.Passengers = Convert.ToInt32(flightPlan[flightPlanPassangersE]);
            return flight;
        }

        //public List<Flights> GetExternal(DateTime time)
        //{
        //    List<Flights> flights = new List<Flights>();
        //    return flights;
        //}

        // Get all internal Flights from the data base.
        public List<Flights> GetFlights(DateTime time)
        {
            List<Flights> flights = new List<Flights>();

            conn.Open();
            // Get all Flights's initialLocation.
            SqliteDataReader query = GetAllInitialLocationsQuery();

            // For each location.
            while (query.Read())
            {
                // Checks if the Flight of the current location is currently flying.
                Flights flight1 = LocationIterationCurrentFlights(time, query);
                if (flight1 != null)
                {
                    flights.Add(flight1);
                }
            }
            query.Close();
            conn.Close();
            return flights;
        }
        // Read from the data bade all initial locations.
        public SqliteDataReader GetAllInitialLocationsQuery()
        {
            SqliteCommand selectCommand = new SqliteCommand();
            selectCommand.Connection = conn;
            selectCommand.CommandText = "SELECT * FROM InitialLocationTable";
            SqliteDataReader query = selectCommand.ExecuteReader();
            return query;
        }
        // Cheack if a flight is currently active.
        public Flights LocationIterationCurrentFlights(DateTime time, SqliteDataReader query)
        {
            object[] location = new object[query.FieldCount];
            query.GetValues(location);
            // InitialTime is in the future.
            if (NotStarted(location, time))
            {
                return null;
            }

            // Get the sum of all the timespanSecond of the Flight's segments.
            string command = "SELECT SUM(TimespanSeconds) FROM SegmentsTable WHERE FlightId= '" + location[initialLocationIdE].ToString() + "'";
            object[] sumTime = ReadFromTableSingleRow(command);

            // EndTime is in the past.
            if (AlreadyFinished(Convert.ToInt32(sumTime[0]), Convert.ToDateTime(location[initalLocationDateTimeE]), time))
            {
                return null;
            }

            // If we got here, this flight is currently flying - we need to create and add it to the flying flights.
            command = "SELECT * FROM SegmentsTable WHERE FlightId= '" + location[initialLocationIdE].ToString() + "'";
            List<Object[]> sgements = ReadMultipleLines(command);

            return CreateFlight(location, sgements, false, time);
        }

        //public List<Flights> GetInternalFlights(DateTime time)
        //{
        //    List<Flights> flights = new List<Flights>();

        //    conn.Open();
        //    // Get all Flights's initialLocation.
        //    SqliteDataReader query = GetAllInitialLocationsQuery();

        //    // For each location.
        //    while (query.Read())
        //    {
        //        // Checks if the Flight of the current location is currently flying.
        //        Flights flight1 = LocationIterationCurrentFlights(time, query);
        //        if (flight1 != null)
        //        {
        //            flights.Add(flight1);
        //        }
        //    }
        //    query.Close();
        //    conn.Close();
        //    return flights;
        //}

        // Create Servers Collection.
        public List<Server> CreateServers(List<object[]> tempServers)
        {
            List<Server> servers = new List<Server>();

            foreach (object[] server in tempServers)
            {
                Server serv = new Server();
                serv.ServerId = Convert.ToString(server[0]);
                serv.ServerURL = Convert.ToString(server[1]);
                servers.Add(serv);
            }

            return servers;

        }
        // Get a Server by a given FlightId.
        public Server GetServerByIdOfFlight(string id)
        {
            conn.Open();
            object[] tempServer = ReadFromTableSingleRow("SELECT * FROM ExternalFlightsTable WHERE FlightId = '" + id + "'");
            conn.Close();
            Server server = new Server();
            if (tempServer[0] == null)
            {
                return null;
            }
            server.ServerId = Convert.ToString(tempServer[0]);
            server.ServerURL = Convert.ToString(tempServer[1]);
            return server;
        }
        // Get all servers from the data base.
        public List<Server> GetServers()
        {
            conn.Open();
            List<Server> servers = new List<Server>();
            List<object[]> tempServers = ReadMultipleLines("SELECT * FROM ServersTable");
            servers = CreateServers(tempServers);
            conn.Close();
            return servers;

        }
        // Get a FlightPlan by a given id.
        public FlightPlan GetFlightPlan(string id)
        {
            conn.Open();
            object[] basicData = ReadFromTableSingleRow("SELECT * FROM FlightPlanTable WHERE Id = '" + id + "'");
            object[] initialLocation = ReadFromTableSingleRow("SELECT * FROM InitialLocationTable WHERE Id= '" + id + "'");
            List<object[]> segments = ReadMultipleLines("SELECT * FROM SegmentsTable  WHERE FlightId= '" + id + "' ORDER BY Place ASC");
            conn.Close();
            return setFlightPlan(basicData, initialLocation, segments);
        }
        //// Get all the fl
        //public List<FlightPlan> GetAllFlightPlans()
        //{
        //    SqliteConnection conn = OpenConnection();
        //    List<FlightPlan> list = new List<FlightPlan>();
        //    List<object[]> ids = ReadMultipleLines(conn, "SELECT Id FROM FlightPlanTable");
        //    foreach (object[] id in ids)
        //    {
        //        list.Add(GetFlightPlan(Convert.ToString(id[0])));
        //    }
        //    conn.Close();
        //    return list;
        //}

        // Insert the given Server into the ServersTable.
        public void InsertServer(Server server)
        {
            conn.Open();
            SqliteCommand insertCommand = new SqliteCommand();
            insertCommand.Connection = conn;

            insertCommand.CommandText = "INSERT INTO ServersTable VALUES (@Id , @Url)";
            insertCommand.Parameters.AddWithValue("@Id", server.ServerId);
            insertCommand.Parameters.AddWithValue("@Url", server.ServerURL);
            try
            {
                insertCommand.ExecuteReader();
            }
            catch { }

            conn.Close();
        }
        // Insert the given FlightPlan into the FlightPlanTable.
        public void InsertToFlightPlanTable(FlightPlan flightPlan, string id)
        {
            SqliteCommand insertCommand = new SqliteCommand();
            insertCommand.Connection = conn;

            insertCommand.CommandText = "INSERT INTO FlightPlanTable VALUES (@Id , @Passengers, @CompanyName)";
            insertCommand.Parameters.AddWithValue("@Id", id);
            insertCommand.Parameters.AddWithValue("@Passengers", flightPlan.Passengers);
            insertCommand.Parameters.AddWithValue("@CompanyName", flightPlan.CompanyName);

            try
            {
                insertCommand.ExecuteReader();
            }
            catch { }
        }
        // Insert the given FlightPlan's InitialLocation into the InitialLocationTable.
        public void InsertToInitialLocationTable(FlightPlan flightPlan, string id)
        {
            SqliteCommand insertCommand = new SqliteCommand();
            insertCommand.Connection = conn;

            insertCommand.CommandText = "INSERT INTO InitialLocationTable VALUES (@Id , @Longitude , @Latitude , @DateTime)";
            insertCommand.Parameters.AddWithValue("@Id", id);
            insertCommand.Parameters.AddWithValue("@Longitude", flightPlan.InitialLocation.Longitude);
            insertCommand.Parameters.AddWithValue("@Latitude", flightPlan.InitialLocation.Latitude);
            insertCommand.Parameters.AddWithValue("@DateTime", flightPlan.InitialLocation.DateTime);

            try
            {
                insertCommand.ExecuteReader();
            }
            catch { }
        }
        // Insert the given FlightPlan's Segments into the SegmentsTable.
        public void InsertToSegmentsTable(FlightPlan flightPlan, string id)
        {
            int i, size = flightPlan.Segments.Count;
            for (i = 0; i < size; i++)
            {
                SqliteCommand insertCommand = new SqliteCommand();
                insertCommand.Connection = conn;
                insertCommand.CommandText = "INSERT INTO SegmentsTable VALUES (NULL, @FlightId, @Place, @Longitude , @Latitude, @TimespanSeconds)";
                insertCommand.Parameters.AddWithValue("@FlightId", id);
                insertCommand.Parameters.AddWithValue("@Place", i + 1);
                insertCommand.Parameters.AddWithValue("@Longitude", flightPlan.Segments[i].Longitude);
                insertCommand.Parameters.AddWithValue("@Latitude", flightPlan.Segments[i].Latitude);
                insertCommand.Parameters.AddWithValue("@TimespanSeconds", flightPlan.Segments[i].TimespanSeconds);
                try
                {
                    insertCommand.ExecuteReader();
                }
                catch { }
            }
        }
        // Insert a FlightPlan into the data base.
        public void InsertFlightPlan(FlightPlan flightPlan, string id)
        {
            conn.Open();
            InsertToFlightPlanTable(flightPlan, id);
            InsertToInitialLocationTable(flightPlan, id);
            InsertToSegmentsTable(flightPlan, id);
            conn.Close();
        }
        // Delete a Server with the given id.
        public void DeleteServer(string id)
        {
            conn.Open();
            SqliteCommand deleteCommand = new SqliteCommand();
            deleteCommand.Connection = conn;
            deleteCommand.CommandText = "DELETE FROM ServersTable WHERE Id='" + id + "'";
            deleteCommand.ExecuteReader();
            conn.Close();
        }
        // Delete a FlightPlan with the given id.
        public bool DeleteFlightPlan(string id)
        {
            int i = 0;
            bool returnVal = true;
            conn.Open();

            string[] tables = { "FlightPlanTable", "InitialLocationTable", "SegmentsTable" };

            for (i = 0; i < tables.Length; i++)
            {
                SqliteCommand deleteCommand = new SqliteCommand();
                deleteCommand.Connection = conn;
                deleteCommand.CommandText = "DELETE FROM " + tables[i] + " WHERE Id='" + id + "'";
                deleteCommand.ExecuteReader();
            }
            conn.Close();
            return returnVal;
        }
        // Create a FlightPlan object.
        public FlightPlan setFlightPlan(object[] basicData, object[] initialLocation, List<object[]> segments)
        {
            FlightPlan flightPlan = new FlightPlan();
            if (basicData[0] == null)
            {
                return null;
            }

            flightPlan.Passengers = Convert.ToInt32(basicData[flightPlanPassangersE]);
            flightPlan.CompanyName = Convert.ToString(basicData[flightPlanCompanyNameE]);

            double longitude = Convert.ToDouble(initialLocation[initialLocationLongitudeE]);
            double latitude = Convert.ToDouble(initialLocation[initialLocationLatitudeE]);
            DateTime dateTime = Convert.ToDateTime(initialLocation[initalLocationDateTimeE]);
            Location location = new Location(longitude, latitude, dateTime);
            flightPlan.InitialLocation = location;

            foreach (object[] segment in segments)
            {
                double longitudeS = Convert.ToDouble(segment[segmentLongitudeE]);
                double latitudeS = Convert.ToDouble(segment[segmentLatitudeE]);
                int TimespanSecond = Convert.ToInt32(segment[segmenTimespanSecondE]);
                Segment segment1 = new Segment(longitudeS, latitudeS, TimespanSecond);
                flightPlan.Segments.Add(segment1);
            }
            return flightPlan;
        }
        // Create a table.
        public static void CreateTable(string nameOfTable, string columns)
        {
            string tableCommand = @"CREATE TABLE IF NOT EXISTS " + nameOfTable + columns;

            SqliteCommand createTable = new SqliteCommand(tableCommand, conn);
            createTable.ExecuteReader();
        }

        // Initialize the data base connection and tables.
        public static void InitializeDatabase()
        {

            string dbPath = AppDomain.CurrentDomain.BaseDirectory + @"\Database.sqlite";
            conn = new SqliteConnection(@"Data Source = " + dbPath);
            conn.Open();


            //string com = "DROP Table ExternalFlightsTable";
            //SqliteCommand delete = new SqliteCommand(com, conn);
            //delete.ExecuteReader();
            //com = "DROP Table ServersTable";
            //delete = new SqliteCommand(com, conn);
            //delete.ExecuteReader();

            CreateTable("ServersTable", "(Id TEXT PRIMARY KEY, Url TEXT)");
            CreateTable("SegmentsTable", "(Id TEXT PRIMARY KEY, FlightId TEXT," +
                " Place INTEGER, Longitude REAL, Latitude REAL, TimespanSeconds INTEGER)");

            CreateTable("InitialLocationTable", "(Id TEXT PRIMARY KEY, Longitude REAL, Latitude REAL, DateTime TEXT)");
            CreateTable("FlightPlanTable", "(Id TEXT PRIMARY KEY, Passengers INTEGER, CompanyName TEXT)");
            CreateTable("ExternalFlightsTable", "(Id TEXT, Url TEXT, FlightId TEXT PRIMARY KEY)");
            conn.Close();
        }
    }
}
